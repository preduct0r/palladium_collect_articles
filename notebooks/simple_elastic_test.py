import asyncio
from elasticsearch import AsyncElasticsearch
from langchain.embeddings import OpenAIEmbeddings

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Elasticsearch
es = AsyncElasticsearch(
    "http://localhost:9200", 
    basic_auth=("elastic", "JxR_8Fj6P23J_q_xU-rf"),
    headers={"Accept": "application/vnd.elasticsearch+json;compatible-with=8"}
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–µ—Ä–∞
embedder = OpenAIEmbeddings(
    model="intfloat/multilingual-e5-large-instruct", 
    base_url="http://localhost:8080/v1",
    api_key="EMPTY"
)

async def quick_search(query: str, k: int = 5):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ RAG - —Ç–æ–ª—å–∫–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""
    
    try:
        print(f"üîç –ü–æ–∏—Å–∫: '{query}'")
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        query_embedding = await asyncio.get_event_loop().run_in_executor(
            None, embedder.embed_query, query
        )
        
        # –ü–æ–∏—Å–∫
        search_body = {
            "knn": {
                "field": "text_embedding",
                "query_vector": query_embedding,
                "k": k,
                "num_candidates": 100
            },
            "_source": ["text", "chunk_id", "chunk_index"]
        }
        
        response = await es.search(index="scientific_papers", **search_body)
        
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(response['hits']['hits'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print("=" * 70)
        
        for i, hit in enumerate(response['hits']['hits'], 1):
            print(f"\n{i}. Score: {hit['_score']:.4f} | Chunk: {hit['_source']['chunk_id']}")
            print(f"–¢–µ–∫—Å—Ç: {hit['_source']['text']}")
            print("-" * 70)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await es.close()

async def main():
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    queries = [
        "gold effect on creep",
        "–º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
        "–ø–æ–ª–∑—É—á–µ—Å—Ç—å –º–µ—Ç–∞–ª–ª–æ–≤"
    ]
    
    # –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π)
    query = "Unparalleled Rates for the Activation of Aryl Chlorides and Bromides"  # –ò–∑–º–µ–Ω–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å
    
    await quick_search(query, k=3)

if __name__ == "__main__":
    asyncio.run(main()) 